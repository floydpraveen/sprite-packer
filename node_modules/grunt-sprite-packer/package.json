{
  "name": "grunt-sprite-packer",
  "description": "Sprite packer converts multiple png files into single sprite file using efficient bin packer algorithm.",
  "version": "0.1.5",
  "homepage": "https://github.com/karfcz/grunt-sprite-packer",
  "author": {
    "name": "Karel Fučík",
    "email": "karf@karf.cz"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/karfcz/grunt-sprite-packer.git"
  },
  "bugs": {
    "url": "https://github.com/karfcz/grunt-sprite-packer/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/karfcz/grunt-sprite-packer/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "handlebars": "~1.0.12",
    "node-imagemagick": "~0.1.8"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-sprite-packer\r\n\r\n> Sprite packer converts multiple png files into single sprite file using efficient packer algorithm. Metadata (names, dimensions and positions of individual sprites) are written into separate template-based text file.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1` and ImageMagick library.\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-sprite-packer --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-sprite-packer');\r\n```\r\n\r\nImageMagick library have to be installed in your system. See [www.imagemagick.org](http://www.imagemagick.org) for installation instructions.\r\n\r\n## The \"spritepacker\" task\r\n\r\n### Overview\r\n\r\nThis task converts multiple images into single image using efficient packing algorithm. It outputs two files: resulting sprite image and a text file with information about positions and dimensions of individual sprites. This text file has no fixed format or structure, instead it is generated using a handlebars template, so that you have full control of its format. It can be plain CSS with classes or some declarations for additional processing (LESS, SASS, Stylus or JSON).\r\n\r\nIn your project's Gruntfile, add a section named `spritepacker` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  spritepacker: {\r\n    default_options: {\r\n      options: {\r\n        // Path to the template for generating metafile:\r\n        template: 'css/sprites.css.tpl',\r\n\r\n        // Destination metafile:\r\n        destCss: 'css/sprites.css',\r\n\r\n        // Base URL for sprite image, used in template\r\n        baseUrl: '../img/'\r\n      },\r\n      files: {\r\n        'img/sprites.png': ['img/sprites/*.png']\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.template\r\nType: `String`\r\n\r\nA path to the template for generating metafile. Template is processed through Handlebars with the following variables:\r\n\r\n* `sprites` - an array of object with metainfo for each sprite\r\n* `baseUrl` - base URL from task options\r\n* `fileName` - file name of generated sprite file (i.e. task destination)\r\n* `width` - width of generated sprite file\r\n* `height` - height of generated sprite file\r\n* `timestamp` - timestamp (can be used in template as image url parameter to prevent caching issues)\r\n\r\nEach item in sprites array contains the following properties:\r\n\r\n* `name` - name of the sprite (= original file name without extension)\r\n* `x` - x position of the sprite in generated sprite file\r\n* `y` - y position of the sprite in generated sprite file\r\n* `width` - width of the sprite\r\n* `height` - height of the sprite\r\n\r\nExample of template file for generating simple CSS:\r\n\r\n```\r\n{{#sprites}}.{{name}} = { background: url('{{../baseUrl}}{{../fileName}}') no-repeat -{{x}}px -{{y}}px; width: {{width}}px; height: {{height}}px; }\r\n{{/sprites}}\r\n```\r\n\r\nExample of template file for generating Stylus declarations to be processed later by some Stylus function:\r\n\r\n```\r\n{{#sprites}}{{name}} = ('{{../baseUrl}}{{../fileName}}' -{{x}}px -{{y}}px {{width}}px {{height}}px {{../name}})\r\n{{/sprites}}\r\n```\r\n\r\n#### options.template\r\nType: `String`\r\n\r\nA path to the template file.\r\n\r\n#### options.destCss\r\nType: `String`\r\n\r\nA path to the metafile that will be generated from the template.\r\n\r\n#### options.baseUrl\r\nType: `String`\r\n\r\nURL path to the generated sprite file.\r\n\r\n#### options.padding\r\nType: `Number`\r\nDefault: `0`\r\n\r\nWhite space that will be added as a padding around every sprite (in px). It is useful to prevent bleeding pixels from one sprite to another when scaled / interpolated in the browser.\r\n\r\n#### options.format\r\nType: `String`\r\nDefault: `'png32'`\r\n\r\nOutput file format. Any image format supported by ImageMagick should work (tested `'png32'` and `'jpg'`).\r\n\r\n#### options.background\r\nType: `String`\r\nDefault: 'none'\r\n\r\nBackground color of output image. `'none'` = transparent, `'#ffffff'` = white, `'#ff0000'` = red etc.\r\n\r\n#### options.quality\r\nType: `String`\r\nDefault: `'100%'`\r\n\r\nCompression quality of output file. Has no effect for file formats other than jpg.\r\n\r\n#### options.evenPixels\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nWhen set to `true`, dimensions of sprites will be aligned to even pixels (useful when scaled down by factor of 2 in CSS for mobile/retina/nonretina optimization). Note that padding must be set to (multiple of) 2 as well.\r\n\r\n## Credits\r\n\r\nThis plugin uses binary tree bin packer algorithm by Jake Gordon (<https://github.com/jakesgordon/bin-packing/>).",
  "readmeFilename": "README.md",
  "_id": "grunt-sprite-packer@0.1.5",
  "_from": "grunt-sprite-packer@~0.1.5"
}
